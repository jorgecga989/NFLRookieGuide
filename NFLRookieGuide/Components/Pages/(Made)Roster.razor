@page "/roster"
@using Microsoft.EntityFrameworkCore
@using NFLRookieGuide.Context
@using NFLRookieGuide.Model
@using System.ComponentModel.DataAnnotations
@inject RosterPlayProvider RosterPlayProvider
@inject NavigationManager NavigationManager
@inject RosterProvider RosterProvider
@inject IHttpClientFactory _clientFactory


<h1 style="text-align:center;" class="mb-4">Select your players</h1>

<EditForm Model="@TheSlots" OnValidSubmit="Save">
    <div class="row mb-3 justify-content-center">
        @for (int i = 0; i < 5; i++) // First 5 slots
        {
            int index = i; // Must be initialized in the loop to be used in @bind-Value
            <div class="col-md-2">
                <div class="card" style="border: 2px solid#000;">
                    <div class="card-body">
                        <h5 class="card-title">Slot @(i + 1)</h5>
                        <div class="form-group">
                            <label for="@($"slot{i}")" class="form-label">Player:</label>
                            <InputSelect id="@($"slot{i}")" @bind-Value="TheSlots!.SelectedSlots[index]" class="form-control" style="border: 2px solid#000;">
                                <option value=""></option>
                                @foreach(var player in teamApi.players.OrderBy(p => p.position))
                                {
                                    @if (player.position == "QB" || player.position == "RB" || player.position == "WR" || player.position == "TE")
                                    {
                                        <option value="@player.name">@player.name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="row justify-content-center mt-5">
        @for (int i = 5; i < 10; i++)
        {
            int index = i; // Must be initialized in the loop to be used in @bind-Value
            <div class="col-md-2">
                <div class="card" style="border: 2px solid#000;">
                    <div class="card-body">
                        <h5 class="card-title">Slot @(i + 1)</h5>
                        <div class="form-group">
                            <label for="@($"slot{i}")" class="form-label">Player:</label>
                            <InputSelect id="@($"slot{i}")" @bind-Value="TheSlots!.SelectedSlots[index]" class="form-control" style="border: 2px solid#000;">
                                <option value=""></option>
                                @foreach (var player in teamApi.players.OrderBy(p => p.position))
                                {
                                    @if (player.position == "QB" || player.position == "RB" || player.position == "WR" || player.position == "TE")
                                    {
                                        <option value="@player.name">@player.name</option>
                                        @*Loops over every player got in the api*@
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row justify-content-center mt-4">
        <div class="col-auto">
            <button class="btn btn-primary btn-lg" style="margin-right: 50px;" @onclick="GoBack">Go Back</button>
            <button type="submit" class="btn btn-danger btn-lg" >Save</button>
            <div class="col-auto  ">
                <label for="name" class="form-label mt-5 fs-5"><strong>Name your roster:</strong></label>
                <InputText id="name" @bind-Value="TheSlots.Name" class="form_control" style="border: 2px solid#000; " />
            </div>
        </div>
    </div>
</EditForm>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h2> @errorString</h2>
}
else if (teamApi is null)
{
    <h4> Loading...</h4>
}
else
{
    <h2>Api is working</h2>
    @if(rosterPlay.Id == null)
    {
        <p>Nothing</p>
    }
    else
    {
        <div>
            <p>@rosterPlay.Name</p>
            <p>@rosterPlay.SelectedSlots[0]</p>
             <p>@rosterPlay.SelectedSlots[1]</p>
            <p>@rosterPlay.SelectedSlots[2]</p>
             <p>@rosterPlay.SelectedSlots[3]</p>
            <p>@rosterPlay.SelectedSlots[4]</p>
            <p>@rosterPlay.SelectedSlots[5]</p>
        </div>
    }
}


@code {
    [Parameter]
    public Roster? Roster{ get; set; }
    //creates a new roster instance

    private Slots? TheSlots { get; set; }
    private RosterPlay rosterPlay;


    public string chosenTeam = "Patriots";
    public string IdChosenTeam;

    TeamAPI teamApi;
    TeamsAPI teamsApi;
    string errorString;


    protected override void OnInitialized()
    {
        TheSlots = Roster != null ? new Slots(Roster) : new Slots();
    }

    protected override async Task OnInitializedAsync()
    {
        rosterPlay = await RosterPlayProvider.NewestPlayAsync();

        var AllTeamsrequest = new HttpRequestMessage(HttpMethod.Get,
            "https://api.sportradar.com/nfl/official/trial/v7/en/league/teams.json?api_key=ioBlppUrp2jlVDWNRdx2AO1uUnqo2AFnstrtMIJC");
        var client = _clientFactory.CreateClient();

        HttpResponseMessage AllTeamsresponse = client.Send(AllTeamsrequest);
        //recieves whether getting the apis info was succesfull or not

        if (AllTeamsresponse.IsSuccessStatusCode)
        {
            teamsApi = await AllTeamsresponse.Content.ReadFromJsonAsync<TeamsAPI>();
            errorString = null;
        }
        else
        {
            errorString = "Error loading data";
            return;
        }


        for (int i = 0; i < teamsApi.teams.Count; i++)
        {
            if (chosenTeam == teamsApi.teams[i].name)
            {
                IdChosenTeam = teamsApi.teams[i].id;
            }
        }

        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://api.sportradar.com/nfl/official/trial/v7/en/teams/{IdChosenTeam}/profile.json?api_key=ioBlppUrp2jlVDWNRdx2AO1uUnqo2AFnstrtMIJC");

        HttpResponseMessage response = client.Send(request);

        if (response.IsSuccessStatusCode)
        {
            teamApi = await response.Content.ReadFromJsonAsync<TeamAPI>();
            errorString = null;
        }
        else
        {
            errorString = "Error loading data";
        }

    }

    public async Task Save()
    {
        //Creating a new roster play component to add the selections
        Roster roster = Roster ?? new Roster();

        roster.SelectedSlots = TheSlots!.SelectedSlots!;
        roster.Name = TheSlots.Name;

        if (roster.Id == 0)
        {
            await RosterProvider.AddRosterAsync(roster);
            TheSlots = new Slots();
        }
        else
        {
            await RosterProvider.UpdateRosterAsync(roster);
        }

    }

    public void GoBack()
    {
        NavigationManager.NavigateTo("/createPlay");
    }

    private sealed class Slots
    {
        //New list for users selections
        public List<string> SelectedSlots { get; set; }

        [Required]
        public string Name { get; set; }

        public Slots()
        {
            //start off the list
            SelectedSlots = new List<string>();
            for (var x = 1; x < 11; x++)
            {
                SelectedSlots.Add("");
            }
        }

        public Slots(Roster roster)
        {
            SelectedSlots = roster.SelectedSlots!;
            Name = roster.Name;
        }
    }
}
