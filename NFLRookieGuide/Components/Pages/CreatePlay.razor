@page "/createPlay"
@using Microsoft.AspNetCore.Authorization
@using NFLRookieGuide.Context
@using NFLRookieGuide.Model
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject RosterPlayProvider RosterPlayProvider
@attribute [Authorize]

<h1 style="text-align:center;" class="mb-4">Create Your Play</h1>
<h4 style="text-align: center;" class="mb-4">Fill 5 slots with 1 QB, 1 TE, 1 RB and 2 WR</h4>
<EditForm Model="@TheSlots" OnValidSubmit="Save">
    <div class="row mb-3 justify-content-center">
        @for (int i = 0; i < 5; i++) // First 5 slots
        {
            int index = i; // Must be initialized in the loop to be used in @bind-Value
            <div class="col-md-2">
                <div class="card" style="border: 2px solid#000;">
                    <div class="card-body">
                        <h5 class="card-title">Slot @(i + 1)</h5>
                        <div class="form-group">
                            <label for="@($"slot{i}")" class="form-label">Position:</label>
                            <InputSelect id="@($"slot{i}")" @bind-Value="TheSlots!.SelectedSlots[index]" class="form-control" style="border: 2px solid#000;">
                                <option value=""></option>
                                <option value="QB">Quarterback</option>
                                <option value="RB">Running Back</option>
                                <option value="TE">Tight End</option>
                                <option value="WR">Wide Receiver</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="row justify-content-center mt-5">
        @for (int i = 5; i < 10; i++) 
        {
            int index = i; // Must be initialized in the loop to be used in @bind-Value
            <div class="col-md-2">
                <div class="card" style="border: 2px solid#000;">
                    <div class="card-body">
                        <h5 class="card-title">Slot @(i + 1)</h5>
                        <div class="form-group">
                            <label for="@($"slot{i}")" class="form-label">Position:</label>
                            <InputSelect id="@($"slot{i}")" @bind-Value="TheSlots!.SelectedSlots[index]" class="form-control" style="border: 2px solid#000;">
                                <option value=""></option>
                                <option value="QB">Quarterback</option>
                                <option value="RB">Running Back</option>
                                <option value="TE">Tight End</option>
                                <option value="WR">Wide Receiver</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row justify-content-center mt-4">
        <div class="col-auto">
            <button class="btn btn-primary btn-lg" style="margin-right: 50px;" @onclick="GoBack">Go Back</button>
            <button type="submit" class="btn btn-danger btn-lg" @onclick="GoToRoster">Save</button>
            <div class="col-auto  ">
                <label for="name" class="form-label mt-5 fs-5"><strong>Name your play:</strong></label>
                <InputText id="name" @bind-Value="TheSlots.Name" class="form_control" style="border: 2px solid#000; "/>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public RosterPlay? RosterPlay { get; set; }

    private Slots? TheSlots { get; set; }

    protected override void OnInitialized()
    {
        TheSlots = RosterPlay != null ? new Slots(RosterPlay) : new Slots();
    }

    public void GoBack()
    {
        NavigationManager.NavigateTo("/selection");
    }

    public void GoToRoster()
    {
        NavigationManager.NavigateTo("/roster");
    }

    public async Task Save()
    {
        //Creating a new roster play component to add the selections
        RosterPlay rosterPlay = RosterPlay ?? new RosterPlay();

        rosterPlay.SelectedSlots = TheSlots!.SelectedSlots!;
        rosterPlay.Name = TheSlots.Name;

        @* testing *@
        @* for (int i = 0; i < TheSlots.SelectedSlots.Count; i++)
        {
            Console.WriteLine($"Slot {i}: {TheSlots.SelectedSlots[i]}");
        } *@

        if(rosterPlay.Id == 0)
        {
            await RosterPlayProvider.AddRosterPlayAsync(rosterPlay);
            TheSlots = new Slots();
        }
        else
        {
            await RosterPlayProvider.UpdateRosterPlayAsync(rosterPlay);
        }

    }

    private sealed class Slots
    {
        //New list for users selections
        public List<string> SelectedSlots { get; set; }

        [Required]
        public string Name { get; set; }

        public Slots()
        {
            //start off the list
            SelectedSlots = new List<string>();
            for(var x = 1; x < 11; x++)
            {
                SelectedSlots.Add("");
            }
        }

        public Slots(RosterPlay rosterPlay)
        {
            SelectedSlots = rosterPlay.SelectedSlots!;
            Name = rosterPlay.Name;
        }
    }
}