@page "/createPlay"
@using NFLRookieGuide.Context
@using NFLRookieGuide.Model
@inject PositionProvider PositionProvider
@inject NavigationManager NavigationManager
@inject RosterPlayProvider RosterPlayProvider

<h3 style="text-align:center">Create Play</h3>
@* 
<div class="container my-5">
    <div class="row justify-content-center">
        @for (int i = 1; i <= 10; i++)
        {
            <div class="col-md-2 mb-4 d-flex justify-content-center">
                <div class="card text-center" style="width: 300px; height: 300px; border: 2px solid #333;">
                    <div class="card-body d-flex flex-column justify-content-center">
                        <h5 class="card-title mb-3">Slot @i</h5>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @(selectedPositions.ContainsKey(i) ? selectedPositions[i].Name : "Select")
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var position in availablePositions)
                                {
                                    <li>
                                        <button class="dropdown-item" type="button"
                                                @onclick="() => TogglePosition(i, position)">
                                            @position.Name
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            @if (i % 5 == 0)
            {
                <div class="w-100"></div>
            }
        }
    </div>
    <button class="btn btn-secondary" type="button" style="float: right;">Save</button>
</div>
 *@
 <div class="row">
     <div class="col-md-4">
         <EditForm OnValidSubmit="@Save">
             @for(var i = 0; i < 10; i++)
            {
                <div class="md-3">
                    <label for= "slot@i" class="form-label">Slot @(i+1)</label>
                    <InputSelect id="slot@i" @bind-Value="Slot.SelectedSlots[i]" @onchange="HandleChange" class="form-control">
                        <option value="quarterback">Quarterback</option>
                        <option value="running back">Running Back</option>
                        <option value="tight end">Tight End</option>
                        <option value="wide reciever">Wide Reciever</option>
                    </InputSelect>
                </div>
            }
            <button type="submit" class="btn btn-red">Save</button>
         </EditForm>
     </div>
 </div>
 

@code {
    [Parameter]
    public RosterPlay? RosterPlay { get; set; }

    private Slots Slot { get; set; }

    protected override void OnInitialized()
    {
        Slot = RosterPlay != null ? new Slots(RosterPlay) : new Slots();
    }

    public void HandleChange(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value);
    }

    public async Task Save()
    {
        var rosterPlay = RosterPlay ?? new RosterPlay();

        rosterPlay.SelectedSlots = Slot.SelectedSlots;
        Console.WriteLine("SAVING");
        rosterPlay.SelectedSlots[1] = "Abc";
        Console.WriteLine(rosterPlay.SelectedSlots[1]);

        if(rosterPlay.Id == 0)
        {
            await RosterPlayProvider.AddRosterPlayAsync(rosterPlay);
            Slot = new Slots();
        }
        else
        {
            await RosterPlayProvider.UpdateRosterPlayAsync(rosterPlay);
        }

    }

    private sealed class Slots
    {
        public List<string?> SelectedSlots { get; set; }


        public Slots()
        {
            SelectedSlots = new List<string?>();
            for(var x = 1; x < 11; x++)
            {
                SelectedSlots.Add(null);
            }
        }

        public Slots(RosterPlay rosterPlay)
        {
            SelectedSlots = rosterPlay.SelectedSlots;

        }
    }
}