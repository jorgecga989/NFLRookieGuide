@page "/catalogue"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using NFLRookieGuide.Context
@using NFLRookieGuide.Model
@using System.ComponentModel.DataAnnotations
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RosterProvider RosterProvider
@inject RosterPlayProvider RosterPlayProvider
@inject IHttpClientFactory _clientFactory
@attribute [Authorize]

@if (rosters is null)
{
    <p>Loading...</p>
}
else if (!rosters.Any())
{
    <h3 style="text-align:center; margin-top: 100px;" class="mb-4">No rosters have been created! </h3>
}
else
{
    if (editVisible == true)
    {
        <p>editRoster.Name</p>
        <EditForm Model="@TheSlots" OnValidSubmit="Update">
            <div class="row mb-3 justify-content-center">
                @for (int i = 0; i < 5; i++) // First 5 slots
                {
                    int index = i; // Must be initialized in the loop to be used in @bind-Value
                    <div class="col-md-2">
                        <div class="card" style="border: 2px solid#000;">
                            <div class="card-body">
                                <h5 class="card-title">Slot @(i + 1): <strong>@editRoster.SelectedPlayers[index]</strong></h5>
                                <div class="form-group">
                                    <label for="@($"slot{i}")" class="form-label">Player:</label>
                                    <InputSelect id="@($"slot{i}")" @bind-Value="TheSlots!.SelectedSlots[index]" class="form-control" style="border: 2px solid#000;">
                                        <option value=""></option>
                                        @foreach (var player in teamApi.players.OrderBy(p => p.position))
                                        {
                                            @if (editRoster.SelectedPlayers[index] != null)
                                            {
                                                string currentPosition = editRoster.SelectedPlayers[index];
                                                @if (player.position == currentPosition)
                                                {
                                                    <option value="@player.name">@player.name</option>
                                                }
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row justify-content-center mt-5">
                @for (int i = 5; i < 10; i++)
                {
                    int index = i; // Must be initialized in the loop to be used in @bind-Value
                    <div class="col-md-2">
                        <div class="card" style="border: 2px solid#000;">
                            <div class="card-body">
                                <h5 class="card-title">Slot @(i + 1): <strong>@editRoster.SelectedPlayers[index]</strong></h5>
                                <div class="form-group">
                                    <label for="@($"slot{i}")" class="form-label">Player:</label>
                                    <InputSelect id="@($"slot{i}")" @bind-Value="TheSlots!.SelectedSlots[index]" class="form-control" style="border: 2px solid#000;">
                                        <option value=""></option>
                                        @foreach (var player in teamApi.players.OrderBy(p => p.position))
                                        {
                                            @if (editRoster.SelectedPlayers[index] != null)
                                            {
                                                @*Only displays players if the user selected the slot previously*@
                                                string currentPosition = editRoster.SelectedPlayers[index];
                                                @if (player.position == currentPosition)
                                                {
                                                    @*Displays players from the position selected in that slot*@
                                                    <option value="@player.name">@player.name</option>
                                                }
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="row justify-content-center mt-4">
                <div class="col-auto">
                    <button type="submit" class="btn btn-danger btn-lg">Save</button>
                    <div class="col-auto  ">
                        <label for="name" class="form-label mt-5 fs-5"><strong>Name your roster:</strong></label>
                        <InputText id="name" @bind-Value="TheSlots.Name" class="form_control" style="border: 2px solid#000; " />
                    </div>
                </div>
            </div>
        </EditForm>
    }

    <h1 style="font-size: 55px; text-align:center; margin-top: 50px;" class="mb-4">Your teams</h1>

    <div style="margin-top: 75px;">
        <table class="table table-striped table-bordered" style="table-layout: fixed; width: 100%;">
            <thead style="background-color: #d3d3d3;">
                <tr>
                    <th style="min-height: 50px;">Roster Name</th>
                    @if (rosters.SelectMany(r => r.SelectedPlayers ?? Enumerable.Empty<string>()).Any())
                    {
                        var maxSlots = rosters.Max(r => r.SelectedPlayers?.Count ?? 0);
                        for (int i = 0; i < maxSlots; i++)
                        {
                            <th style="min-height: 50px;">Slot @($"{i + 1}")</th>
                        }
                    }
                    <th style="min-height: 50px; width: 150px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var roster in rosters)
                {
                    <tr style="height: 60px;">
                        <td>@roster.Name</td>
                        @if (roster.SelectedPlayers != null)
                        {
                            for (int i = 0; i < (rosters.Max(r => r.SelectedPlayers?.Count) ?? 0); i++)
                            {
                                <td style="height: 60px; vertical-align: middle; text-align: center;">
                                    @if (i < roster.SelectedPlayers.Count && roster.SelectedPlayers[i] != null)
                                    {
                                        @roster.SelectedPlayers[i]
                                    }
                                </td>
                            }
                        }
                        <td>
                            <div class="d-flex justify-content-between align-items-center" style="gap: 5px;">
                                <button class="btn btn-danger" style="padding: 8px 12px; font-size: 14px;" @onclick="() => Delete(roster)">Delete</button>
                                <button class="btn btn-primary" style="padding: 8px 12px; font-size: 14px;" @onclick="() => EditRoster(roster)">Edit</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


}


@code {
    private Slots? TheSlots { get; set; }
    private Roster? Rosters { get; set; }
    private List<Roster> rosters = new List<Roster>();
    private bool editVisible = false;
    private Roster editRoster = null;
    private RosterPlay rosterPlay;

    public string chosenTeam = "Patriots";
    public string IdChosenTeam;

    TeamAPI teamApi;
    TeamsAPI teamsApi;
    string errorString;

    protected async override Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authstate.User!.Identity!.Name!;
        var user = UserProvider.GetUserByUsername(username);

        rosters = await RosterProvider.GetRostersAsync(user);

        var AllTeamsrequest = new HttpRequestMessage(HttpMethod.Get,
            "https://api.sportradar.com/nfl/official/trial/v7/en/league/teams.json?api_key=ioBlppUrp2jlVDWNRdx2AO1uUnqo2AFnstrtMIJC");
        var client = _clientFactory.CreateClient();

        HttpResponseMessage AllTeamsresponse = client.Send(AllTeamsrequest);
        //recieves whether getting the apis info was succesfull or not

        if (AllTeamsresponse.IsSuccessStatusCode)
        {
            teamsApi = await AllTeamsresponse.Content.ReadFromJsonAsync<TeamsAPI>();
            errorString = null;
        }
        else
        {
            errorString = "Error loading data";
            return;
        }


        for (int i = 0; i < teamsApi.teams.Count; i++)
        {
            if (chosenTeam == teamsApi.teams[i].name)
            {
                IdChosenTeam = teamsApi.teams[i].id;
            }
        }

        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://api.sportradar.com/nfl/official/trial/v7/en/teams/{IdChosenTeam}/profile.json?api_key=ioBlppUrp2jlVDWNRdx2AO1uUnqo2AFnstrtMIJC");

        HttpResponseMessage response = client.Send(request);

        if (response.IsSuccessStatusCode)
        {
            teamApi = await response.Content.ReadFromJsonAsync<TeamAPI>();
            errorString = null;
        }
        else
        {
            errorString = "Error loading data";
        }
    }

    private async Task Delete(Roster roster)
    {
        await RosterProvider.DeleteRosterAsync(roster);
        // Remove the roster
        rosters.Remove(roster);
        StateHasChanged();
        // Update the UI

    }

    private void EditRoster(Roster roster)
    {
        editRoster = roster;
        TheSlots = new Slots(roster);
        editVisible = true;
    }

    private async Task Update()
    {
        
    }

    private sealed class Slots
    {
        //New list for users selections
        public List<string> SelectedSlots { get; set; }

        [Required]
        public string Name { get; set; }

        public Slots()
        {
            //start off the list
            SelectedSlots = new List<string>();
            for (var x = 1; x < 11; x++)
            {
                SelectedSlots.Add("");
            }
        }

        public Slots(Roster roster)
        {
            SelectedSlots = roster.SelectedPlayers!;
            Name = roster.Name;
        }
    }
}
