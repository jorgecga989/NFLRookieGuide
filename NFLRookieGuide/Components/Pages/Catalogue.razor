@page "/catalogue"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using NFLRookieGuide.Context
@using NFLRookieGuide.Model
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RosterProvider RosterProvider
@attribute [Authorize]


@if (rosters is null)
{
    <p>Loading...</p>
}
else if (!rosters.Any())
{
    <h3 style="text-align:center; margin-top: 100px;" class="mb-4">No rosters have been created! </h3>
}
else
{
    <h1 style="font-size: 55px; text-align:center; margin-top: 50px;" class="mb-4">Your teams</h1>

    <div style="margin-top: 75px;">
        <table class="table table-striped table-bordered" style="table-layout: fixed; width: 100%;">
            <thead style="background-color: #d3d3d3;">
                <tr>
                    <th style="min-height: 50px;">Roster Name</th>
                    @if (rosters.SelectMany(r => r.SelectedPlayers ?? Enumerable.Empty<string>()).Any())
                    {
                        var maxSlots = rosters.Max(r => r.SelectedPlayers?.Count ?? 0);
                        for (int i = 0; i < maxSlots; i++)
                        {
                            <th style="min-height: 50px;">Slot @($"{i + 1}")</th>
                        }
                    }
                    <th style="min-height: 50px; width: 150px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var roster in rosters)
                {
                    <tr style="height: 60px;">
                        <td>@roster.Name</td>
                        @if (roster.SelectedPlayers != null)
                        {
                            for (int i = 0; i < (rosters.Max(r => r.SelectedPlayers?.Count) ?? 0); i++)
                            {
                                <td style="height: 60px; vertical-align: middle; text-align: center;">
                                    @if (i < roster.SelectedPlayers.Count && roster.SelectedPlayers[i] != null)
                                    {
                                        @roster.SelectedPlayers[i]
                                    }
                                </td>
                            }
                        }
                        <td>
                            <div class="d-flex justify-content-between align-items-center" style="gap: 5px;">
                                <button class="btn btn-danger" style="padding: 8px 12px; font-size: 14px;" @onclick="() => Delete(roster)">Delete</button>
                                <button class="btn btn-primary" style="padding: 8px 12px; font-size: 14px;">Edit</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


}


@code {
    private List<Roster> rosters = new List<Roster>();

    protected async override Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authstate.User!.Identity!.Name!;
        var user = UserProvider.GetUserByUsername(username);

        rosters = (await RosterProvider.GetRostersAsync(user!)).ToList();
    }

    private async Task Delete(Roster roster)
    {
        await RosterProvider.DeleteRosterAsync(roster);
        // Remove the roster
        rosters.Remove(roster);
        // Update the UI
        StateHasChanged();
        // Update the UI

    }

}
